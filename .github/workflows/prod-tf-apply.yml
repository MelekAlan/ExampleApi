name: 'TF Deployment to OVHCloud K8s Cluster'

on:
  push:
    paths:
      - exampleApi-infra/**
    branches:
      - main


permissions:
  contents: read

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  OVH_ACCESS_KEY_ID: ${{ secrets.OVH_ACCESS_KEY_ID }}
  OVH_SECRET_ACCESS_KEY: ${{ secrets.OVH_SECRET_ACCESS_KEY }}
  OVH_ENDPOINT: ovh-eu
  OVH_APPLICATION_KEY: ${{ secrets.OVH_APPLICATION_KEY }}
  OVH_APPLICATION_SECRET: ${{ secrets.OVH_APPLICATION_SECRET }}
  OVH_CONSUMER_KEY: ${{ secrets.OVH_CONSUMER_KEY }}
  ROOT_PATH: '${{ github.workspace}}/exampleApi-infra/src'

jobs:
  terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        #backend-config: "bucket=tfstatemulti"


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init 
      working-directory: ${{ env.ROOT_PATH}}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -var-file="variables.tfvars"
      working-directory: ${{ env.ROOT_PATH}}


  terraform_apply:
      name: 'Terraform Apply'
      runs-on: ubuntu-latest
      needs: terraform_plan
      environment: production
    
        # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
      defaults:
        run:
          shell: bash
    
      steps:
        # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
    
        # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          #backend-config: "bucket=tf-remote-backend-k8s"
    
    
        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          echo "Terraform init"
          terraform init
        working-directory: ${{ env.ROOT_PATH}}
    
        # Generates an execution plan for Terraform
      - name: Terraform Apply
        run: terraform plan -input=false -var-file="variablesDev.tfvars" #terraform apply -auto-approve -input=false
        working-directory: ${{ env.ROOT_PATH}}
    
    #- name: Terraform Destroy
     # run: terraform destroy -auto-approve
